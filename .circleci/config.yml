# CircleCI orbs are open-source, shareable packages of parameterizable reusable
# configuration elements, including jobs, commands, and executors.

#TODO: The matrix stanza allows you to run a parameterized job multiple times with different arguments.
#TODO: Learnin circeCI scheduling

version: 2.1

commands: # a reusable command with parameters
  greeting:
    parameters:
      to:
        default: "world"
        type: string
    steps:
      - run: echo "Hello <<parameters.to>>!"

  deploy-to-target:
    parameters:
      target:
        default: "dev"
        type: string
    steps:
      - run:
          command: |
            echo "Deploying code to <<parameters.target>>!"

# Executors define the environment in which the steps of a job will be run,
# allowing you to reuse a single executor definition across multiple jobs.
executors:
  python3:
    docker:
      - image: cimg/python:3.8.6 # primary container for the build job
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD # context / project UI env-var reference
        environment:
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
      - image: cimg/postgres:14.0 # an example of how to specify a service container
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD # context / project UI env-var reference
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test

jobs: # A job needs atleast 2 things. A executer and steps
  build:
    executor: python3
    working_directory: ~/project
    steps:
      - checkout
      # - run: sudo chown -R circleci:circleci /usr/local/bin
      # - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
      # - restore_cache:
      #     key: deps9-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run: # use to run bash command
          command: |
            pip install -r requirements.txt
      - save_cache:
          key: deps9-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.6/site-packages"
          # python temp.py
      # - run:
      #     command: |
      #       make docker-build

      - store_test_results:
          path: test-results
      # - store_artifacts:
      #     path: test-results
      #     destination: tr1

  test:
    working_directory: ~/project
    executor: python3
    steps:
      - checkout
      - run:
          command: |
            pip install pytest
            pytest --junitxml=test-results/junit.xml

  greet:
    executor: python3
    steps:
      - greeting:
          to: "Vikram!"
      - greeting # Here it will print Hello world!

  test_context_withoutsetting_context:
    executor: python3
    steps:
      - run:
          command: |
            echo $ECR_NAME
  test_context_setting_context:
    executor: python3
    steps:
      - run:
          command: |
            echo $ECR_NAME

  print_runtime_env:
    working_directory: ~/project
    executor: python3
    steps:
      - run:
          command: |
            echo "USER NAME: "
            echo $USER
            echo $CUSTOM_ENV
          environment:
            CUSTOM_ENV: "My Values"

  deploy-dev:
    executor: python3
    steps:
      - deploy-to-target:
          target: "Dev Instance"

  deploy-prod:
    executor: python3
    steps:
      - deploy-to-target:
          target: "PROD Instance"

workflows:
  build_workflow:
    jobs:
      - build:
          requires:
            - "test"
      - test
      - print_runtime_env
      - greet
      - test_context_setting_context: # context need to be set at runtime
          context: my-context

      - test_context_withoutsetting_context
      - Dev Deploy Approval:
          type: approval
      - deploy-dev:
          # steps: #NOTE: We cant give steps in workflow
          filters: #USED TO run jobs conditionally
            # Branches can have the keys only and ignore which either map to a single string naming a branch. You may also use regular expressions
            branches:
              only: main
          requires:
            - Dev Deploy Approval
      - Prod Deploy Approval:
          type: approval
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - deploy-prod:
          # steps: #NOTE: We cant give steps in workflow
          filters: #USED TO run jobs conditionally
            # Branches can have the keys only and ignore which either map to a single string naming a branch. You may also use regular expressions
            branches: # This will not run on any branch. To only run with tag configuration with (v.*)
              ignore: /.*/
            tags: #CircleCI does not run workflows for tags unless you explicitly specify tag filters
              only: /^v.*/
          requires:
            - Prod Deploy Approval
